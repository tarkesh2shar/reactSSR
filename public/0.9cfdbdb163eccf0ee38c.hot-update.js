webpackHotUpdate(0,{355:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r},u=n(394),a=n(374);t.default={component:(0,u.connect)((function(e){return{sample:e.sample}}),{getSampleData:a.getSampleData})((function(e){return(0,o.useEffect)((function(){e.getSampleData()}),[]),i.default.createElement("div",null,"This is a basic Component",i.default.createElement("p",null,"The data is fetched on the server and a full fledged html is send asap"),i.default.createElement("button",{onClick:function(e){return alert("clicked on a button")}},"Click me"))})),loadData:function(e){return e.dispatch((0,a.getSampleData)())}}},362:function(e,t,n){"use strict";var r=n(364),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function u(e){return void 0===e}function a(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!u(e)&&null!==e.constructor&&!u(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:u,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return a(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},363:function(e,t,n){"use strict";(function(e,r){var o,i=n(372);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(i.a)(o);t.a=u}).call(this,n(75),n(373)(e))},364:function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},365:function(e,t,n){"use strict";var r=n(362);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var u=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),u.push(o(t)+"="+o(e))})))})),i=u.join("&")}if(i){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},366:function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},367:function(e,t,n){"use strict";(function(t){var r=n(362),o=n(383),i={"Content-Type":"application/x-www-form-urlencoded"};function u(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(a=n(368)),a),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(u(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(u(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s}).call(this,n(382))},368:function(e,t,n){"use strict";var r=n(362),o=n(384),i=n(365),u=n(386),a=n(389),s=n(390),c=n(369);e.exports=function(e){return new Promise((function(t,f){var p=e.data,l=e.headers;r.isFormData(p)&&delete l["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";l.Authorization="Basic "+btoa(h+":"+m)}var v=u(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),i(v,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,f,r),d=null}},d.onabort=function(){d&&(f(c("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){f(c("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),f(c(t,e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var b=n(391),y=(e.withCredentials||s(v))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;y&&(l[e.xsrfHeaderName]=y)}if("setRequestHeader"in d&&r.forEach(l,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete l[t]:d.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),f(e),d=null)})),void 0===p&&(p=null),d.send(p)}))}},369:function(e,t,n){"use strict";var r=n(385);e.exports=function(e,t,n,o,i){var u=new Error(e);return r(u,t,n,o,i)}},370:function(e,t,n){"use strict";var r=n(362);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],u=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(i,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(u,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var a=o.concat(i).concat(u),s=Object.keys(t).filter((function(e){return-1===a.indexOf(e)}));return r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},371:function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},372:function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},373:function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},374:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSampleData=void 0;var r,o=n(375),i=n(376),u=(r=i)&&r.__esModule?r:{default:r};t.getSampleData=function(){return e=regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,u.default.get("https://jsonplaceholder.typicode.com/posts");case 2:n=e.sent,t({type:o.SAMPLE_DATA,payload:n.data});case 4:case"end":return e.stop()}}),e,void 0)})),t=function(){var t=e.apply(this,arguments);return new Promise((function(e,n){return function r(o,i){try{var u=t[o](i),a=u.value}catch(e){return void n(e)}if(!u.done)return Promise.resolve(a).then((function(e){r("next",e)}),(function(e){r("throw",e)}));e(a)}("next")}))},function(e){return t.apply(this,arguments)};var e,t}},375:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SAMPLE_DATA="SAMPLE_DATA"},376:function(e,t,n){e.exports=n(377)},377:function(e,t,n){"use strict";var r=n(362),o=n(364),i=n(378),u=n(370);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=a(n(367));s.Axios=i,s.create=function(e){return a(u(s.defaults,e))},s.Cancel=n(371),s.CancelToken=n(392),s.isCancel=n(366),s.all=function(e){return Promise.all(e)},s.spread=n(393),e.exports=s,e.exports.default=s},378:function(e,t,n){"use strict";var r=n(362),o=n(365),i=n(379),u=n(380),a=n(370);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[u,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=s},379:function(e,t,n){"use strict";var r=n(362);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},380:function(e,t,n){"use strict";var r=n(362),o=n(381),i=n(366),u=n(367);function a(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return a(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||u.adapter)(e).then((function(t){return a(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(a(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},381:function(e,t,n){"use strict";var r=n(362);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},382:function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(e){r=u}}();var s,c=[],f=!1,p=-1;function l(){f&&s&&(f=!1,s.length?c=s.concat(c):p=-1,c.length&&d())}function d(){if(!f){var e=a(l);f=!0;for(var t=c.length;t;){for(s=c,c=[];++p<t;)s&&s[p].run();p=-1,t=c.length}s=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||f||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},383:function(e,t,n){"use strict";var r=n(362);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},384:function(e,t,n){"use strict";var r=n(369);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},385:function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},386:function(e,t,n){"use strict";var r=n(387),o=n(388);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},387:function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},388:function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},389:function(e,t,n){"use strict";var r=n(362),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,u={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(u[t]&&o.indexOf(t)>=0)return;u[t]="set-cookie"===t?(u[t]?u[t]:[]).concat([n]):u[t]?u[t]+", "+n:n}})),u):u}},390:function(e,t,n){"use strict";var r=n(362);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},391:function(e,t,n){"use strict";var r=n(362);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,u){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===u&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},392:function(e,t,n){"use strict";var r=n(371);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},393:function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},394:function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return f})),n.d(t,"connectAdvanced",(function(){return j})),n.d(t,"ReactReduxContext",(function(){return i})),n.d(t,"connect",(function(){return z})),n.d(t,"batch",(function(){return Y.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return J})),n.d(t,"createDispatchHook",(function(){return X})),n.d(t,"useSelector",(function(){return Q})),n.d(t,"createSelectorHook",(function(){return $})),n.d(t,"useStore",(function(){return K})),n.d(t,"createStoreHook",(function(){return I})),n.d(t,"shallowEqual",(function(){return P}));var r=n(1),o=n.n(r),i=(n(59),o.a.createContext(null));var u=function(e){e()},a={notify:function(){}};function s(){var e=u,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var c=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=a,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=a)},e}();var f=function(e){var t=e.store,n=e.context,u=e.children,a=Object(r.useMemo)((function(){var e=new c(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,s]);var f=n||i;return o.a.createElement(f.Provider,{value:a},u)},p=n(9),l=n(49),d=n(144),h=n.n(d),m=n(142),v="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,b=[],y=[null,null];function g(e,t){var n=e[1];return[t.payload,n+1]}function w(e,t,n){v((function(){return e.apply(void 0,t)}),n)}function O(e,t,n,r,o,i,u){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,u())}function S(e,t,n,r,o,i,u,a,s,c){if(e){var f=!1,p=null,l=function(){if(!f){var e,n,l=t.getState();try{e=r(l,o.current)}catch(e){n=e,p=e}n||(p=null),e===i.current?u.current||s():(i.current=e,a.current=e,u.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=l,n.trySubscribe(),l();return function(){if(f=!0,n.tryUnsubscribe(),n.onStateChange=null,p)throw p}}}var x=function(){return[null,0]};function j(e,t){void 0===t&&(t={});var n=t,u=n.getDisplayName,a=void 0===u?function(e){return"ConnectAdvanced("+e+")"}:u,s=n.methodName,f=void 0===s?"connectAdvanced":s,d=n.renderCountProp,v=void 0===d?void 0:d,j=n.shouldHandleStateChanges,E=void 0===j||j,P=n.storeKey,C=void 0===P?"store":P,T=(n.withRef,n.forwardRef),R=void 0!==T&&T,N=n.context,A=void 0===N?i:N,M=Object(l.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),D=A;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=Object(p.a)({},M,{getDisplayName:a,methodName:f,renderCountProp:v,shouldHandleStateChanges:E,storeKey:C,displayName:i,wrappedComponentName:n,WrappedComponent:t}),s=M.pure;var d=s?r.useMemo:function(e){return e()};function j(n){var i=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(l.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),a=i[0],s=i[1],f=i[2],h=Object(r.useMemo)((function(){return a&&a.Consumer&&Object(m.isContextConsumer)(o.a.createElement(a.Consumer,null))?a:D}),[a,D]),v=Object(r.useContext)(h),j=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(v)&&Boolean(v.store);var P=j?n.store:v.store,C=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,u)}(P)}),[P]),T=Object(r.useMemo)((function(){if(!E)return y;var e=new c(P,j?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[P,j,v]),R=T[0],N=T[1],A=Object(r.useMemo)((function(){return j?v:Object(p.a)({},v,{subscription:R})}),[j,v,R]),M=Object(r.useReducer)(g,b,x),q=M[0][0],k=M[1];if(q&&q.error)throw q.error;var B=Object(r.useRef)(),U=Object(r.useRef)(f),L=Object(r.useRef)(),_=Object(r.useRef)(!1),H=d((function(){return L.current&&f===U.current?L.current:C(P.getState(),f)}),[P,q,f]);w(O,[U,B,_,f,H,L,N]),w(S,[E,P,R,C,U,B,_,L,N,k],[P,R,C]);var F=Object(r.useMemo)((function(){return o.a.createElement(t,Object(p.a)({},H,{ref:s}))}),[s,t,H]);return Object(r.useMemo)((function(){return E?o.a.createElement(h.Provider,{value:A},F):F}),[h,F,A])}var P=s?o.a.memo(j):j;if(P.WrappedComponent=t,P.displayName=i,R){var T=o.a.forwardRef((function(e,t){return o.a.createElement(P,Object(p.a)({},e,{forwardedRef:t}))}));return T.displayName=i,T.WrappedComponent=t,h()(T,t)}return h()(P,t)}}function E(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function P(e,t){if(E(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!E(e[n[o]],t[n[o]]))return!1;return!0}n(363);var C=function(){return Math.random().toString(36).substring(7).split("").join(".")};C(),C();function T(e,t){return function(){return t(e.apply(this,arguments))}}function R(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function N(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function A(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=N(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=N(o),o=r(t,n)),o},r}}var M=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:R((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?R((function(t){return function(e,t){if("function"==typeof e)return T(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=T(o,t))}return n}(e,t)})):void 0}];var D=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:R((function(){return{}}))}];function q(e,t,n){return Object(p.a)({},n,{},e,{},t)}var k=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,u=!1;return function(t,n,a){var s=e(t,n,a);return u?o&&i(s,r)||(r=s):(u=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return q}}];function B(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function U(e,t,n,r,o){var i,u,a,s,c,f=o.areStatesEqual,p=o.areOwnPropsEqual,l=o.areStatePropsEqual,d=!1;function h(o,d){var h,m,v=!p(d,u),b=!f(o,i);return i=o,u=d,v&&b?(a=e(i,u),t.dependsOnOwnProps&&(s=t(r,u)),c=n(a,s,u)):v?(e.dependsOnOwnProps&&(a=e(i,u)),t.dependsOnOwnProps&&(s=t(r,u)),c=n(a,s,u)):b?(h=e(i,u),m=!l(h,a),a=h,m&&(c=n(a,s,u)),c):c}return function(o,f){return d?h(o,f):(a=e(i=o,u=f),s=t(r,u),c=n(a,s,u),d=!0,c)}}function L(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(l.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),u=n(e,i),a=r(e,i),s=o(e,i);return(i.pure?U:B)(u,a,s,e,i)}function _(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function H(e,t){return e===t}function F(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?j:n,o=t.mapStateToPropsFactories,i=void 0===o?D:o,u=t.mapDispatchToPropsFactories,a=void 0===u?M:u,s=t.mergePropsFactories,c=void 0===s?k:s,f=t.selectorFactory,d=void 0===f?L:f;return function(e,t,n,o){void 0===o&&(o={});var u=o,s=u.pure,f=void 0===s||s,h=u.areStatesEqual,m=void 0===h?H:h,v=u.areOwnPropsEqual,b=void 0===v?P:v,y=u.areStatePropsEqual,g=void 0===y?P:y,w=u.areMergedPropsEqual,O=void 0===w?P:w,S=Object(l.a)(u,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),x=_(e,i,"mapStateToProps"),j=_(t,a,"mapDispatchToProps"),E=_(n,c,"mergeProps");return r(d,Object(p.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:x,initMapDispatchToProps:j,initMergeProps:E,pure:f,areStatesEqual:m,areOwnPropsEqual:b,areStatePropsEqual:g,areMergedPropsEqual:O},S))}}var z=F();function W(){return Object(r.useContext)(i)}function I(e){void 0===e&&(e=i);var t=e===i?W:function(){return Object(r.useContext)(e)};return function(){return t().store}}var K=I();function X(e){void 0===e&&(e=i);var t=e===i?K:I(e);return function(){return t().dispatch}}var J=X(),V=function(e,t){return e===t};function $(e){void 0===e&&(e=i);var t=e===i?W:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=V);var o=t();return function(e,t,n,o){var i,u=Object(r.useReducer)((function(e){return e+1}),0)[1],a=Object(r.useMemo)((function(){return new c(n,o)}),[n,o]),s=Object(r.useRef)(),f=Object(r.useRef)(),p=Object(r.useRef)();try{i=e!==f.current||s.current?e(n.getState()):p.current}catch(e){throw s.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+s.current.stack+"\n\n"),e}return v((function(){f.current=e,p.current=i,s.current=void 0})),v((function(){function e(){try{var e=f.current(n.getState());if(t(e,p.current))return;p.current=e}catch(e){s.current=e}u({})}return a.onStateChange=e,a.trySubscribe(),e(),function(){return a.tryUnsubscribe()}}),[n,a]),i}(e,n,o.store,o.subscription)}}var G,Q=$(),Y=n(350);G=Y.unstable_batchedUpdates,u=G}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=0.9cfdbdb163eccf0ee38c.hot-update.js.map